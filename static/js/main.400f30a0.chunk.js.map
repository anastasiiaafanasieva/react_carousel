{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","step","frameSize","itemWidth","animationDuration","infinite","scroll","clickNextButton","images","props","length","setState","clickPrevButton","isInfinite","this","carouselListStyles","marginLeft","transition","carouselStyle","width","className","type","disabled","onClick","style","map","image","src","alt","replace","htmlFor","name","id","min","max","value","onChange","event","target","checked","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.400f30a0.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype State = {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  scroll: number;\n};\n\ntype Props = {\n  images: string[];\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    scroll: 0,\n  };\n\n  clickNextButton = () => {\n    const {\n      scroll,\n      frameSize,\n      infinite,\n      step,\n    } = this.state;\n    const { images } = this.props;\n\n    if (scroll === images.length - frameSize && infinite) {\n      this.setState({ scroll: 0 });\n    } else if (scroll + step >= images.length - frameSize) {\n      this.setState({ scroll: images.length - frameSize });\n    } else {\n      this.setState((state) => {\n        return { scroll: state.scroll + state.step };\n      });\n    }\n  };\n\n  clickPrevButton = () => {\n    const {\n      scroll,\n      frameSize,\n      infinite,\n      step,\n    } = this.state;\n    const { images } = this.props;\n\n    if (scroll === 0 && infinite) {\n      this.setState({ scroll: images.length - frameSize });\n    } else if (scroll - step < 0) {\n      this.setState({ scroll: 0 });\n    } else {\n      this.setState((state) => {\n        return { scroll: state.scroll - state.step };\n      });\n    }\n  };\n\n  isInfinite = () => {\n    if (this.state.infinite) {\n      this.setState({ infinite: false });\n    } else {\n      this.setState({ infinite: true });\n    }\n  };\n\n  render() {\n    const { images } = this.props;\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      scroll,\n    } = this.state;\n\n    const carouselListStyles = {\n      marginLeft: `-${scroll * itemWidth}px`,\n      transition: `${animationDuration}ms`,\n    };\n\n    const carouselStyle = {\n      width: `${itemWidth * frameSize}px`,\n    };\n\n    return (\n      <>\n        <div className=\"carousel\">\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            disabled={scroll <= 0 && !infinite}\n            onClick={this.clickPrevButton}\n          >\n            Previous\n          </button>\n\n          <div\n            className=\"carousel__container\"\n            style={carouselStyle}\n          >\n            <ul\n              className=\"carousel__list\"\n              style={carouselListStyles}\n            >\n              {images.map((image) => (\n                <li key={image} className=\"carousel__item\">\n                  <img\n                    className=\"carousel__image\"\n                    src={`${image}`}\n                    alt={`${image.replace(/\\D/g, '')}`}\n                    width={itemWidth}\n                  />\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            disabled={scroll + frameSize >= images.length && !infinite}\n            onClick={this.clickNextButton}\n          >\n            Next\n          </button>\n\n        </div>\n\n        <form className=\"form\">\n          <label htmlFor=\"step\">\n            Step:\n            <input\n              type=\"number\"\n              name=\"step\"\n              id=\"step\"\n              min={1}\n              max={images.length}\n              step={1}\n              value={step}\n              onChange={(event) => {\n                this.setState(\n                  { step: +event.target.value },\n                );\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"frameSize\">\n            Frame Size:\n            <input\n              type=\"range\"\n              name=\"frameSize\"\n              id=\"frameSize\"\n              min={1}\n              max={images.length}\n              value={frameSize}\n              onChange={(event) => {\n                this.setState(\n                  { frameSize: +event.target.value },\n                );\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"itemWidth\">\n            Image width:\n            <input\n              type=\"range\"\n              name=\"itemWidth\"\n              id=\"itemWidth\"\n              min={10}\n              max={260}\n              value={itemWidth}\n              onChange={(event) => {\n                this.setState(\n                  { itemWidth: +event.target.value },\n                );\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"animationDuration\">\n            Animation Duration:\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              id=\"animationDuration\"\n              min={0}\n              max={10000}\n              value={animationDuration}\n              onChange={(event) => {\n                this.setState(\n                  { animationDuration: +event.target.value },\n                );\n              }}\n            />\n          </label>\n\n          <label htmlFor=\"infinite\">\n            Infinite:\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              id=\"infinite\"\n              value=\"infinite\"\n              checked={infinite}\n              onChange={this.isInfinite}\n            />\n          </label>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}